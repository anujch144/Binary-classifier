# -*- coding: utf-8 -*-
"""Assign.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xO8H4ouwmpewWXrs54WmrUXfXnnaqJq_
"""

from google.colab import files
uploaded=files.upload()

!pwd

import os
os.environ['KAGGLE_CONFIG_DIR']="/content"

!kaggle datasets download -d anujms/car-damage-detection

import tensorflow as tf
import numpy as np
from tensorflow import keras
import os
import cv2
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt

train = ImageDataGenerator(rescale=1/255)
test = ImageDataGenerator(rescale=1/255)

from zipfile import ZipFile

file_name="/content/car-damage-detection.zip"
 
with ZipFile(file_name,'r') as zip:
 zip.extractall()
 print('done')

train_dataset = train.flow_from_directory("/content/data1a/training",
                                          target_size=(150,150),
                                          batch_size = 32,
                                          class_mode = 'binary')
                                         
test_dataset = test.flow_from_directory("/content/data1a/validation",
                                          target_size=(150,150),
                                          batch_size =32,
                                          class_mode = 'binary')

model = keras.Sequential()

# Convolutional layer and maxpool layer 
model.add(keras.layers.Conv2D(32,(3,3),activation='relu',input_shape=(150,150,3)))
model.add(keras.layers.MaxPool2D(2,2))

model.add(keras.layers.Conv2D(64,(3,3),activation='relu'))
model.add(keras.layers.MaxPool2D(2,2))

model.add(keras.layers.Conv2D(128,(3,3),activation='relu'))
model.add(keras.layers.MaxPool2D(2,2))

model.add(keras.layers.Conv2D(128,(3,3),activation='relu'))
model.add(keras.layers.MaxPool2D(2,2))

# This layer flattens the resulting image array to 1D array
model.add(keras.layers.Flatten())
 
model.add(keras.layers.Dense(512,activation='relu'))

# Output layer with single neuron which gives 0 for Cat or 1 for Dog 
#Here we use sigmoid activation function which makes o

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

model.fit_generator(train_dataset,
         steps_per_epoch = 250,
         epochs = 10,
         validation_data = test_dataset
       
         )

def predictImage(filename):
    img1 = image.load_img(filename,target_size=(150,150))
    
    plt.imshow(img1)
 
    Y = image.img_to_array(img1)
    
    X = np.expand_dims(Y,axis=0)
    val = model.predict(X)
    print(val)
    if val == 1:
        
        plt.xlabel("DAMAGED",fontsize=30)
        
    
    elif val == 0:
        
        plt.xlabel("NOT DAMAGED",fontsize=30)



